@page "/doctor"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="medical-dashboard-container">
    @if (isLoading)
    {
            <div class="loading-overlay">
                <div class="spinner"></div>
            </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
            <div class="alert alert-danger">@errorMessage</div>
    }

    <header class="medical-dashboard-header">
        <h1>Doctor Dashboard</h1>
    </header>

    <div class="medical-patient-records-section">
        <div class="medical-header-controls">
            <input type="text" class="medical-search-bar" placeholder="Search patients by ID or Name"
                   @bind="patientSearchTerm" @bind:event="oninput" @onkeyup="FilterPatients" />
        </div>

        <div class="medical-table-container">
            <table>
                <thead>
                    <tr>
                        <th>Patient ID</th>
                        <th>Full Name</th>
                        <th>Date of Birth</th>
                        <th>Gender</th>
                        <th>Contact Number</th>
                        <th class="medical-actions">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var patient in FilteredPatients)
                    {
                            <tr>
                                <td>@patient.PatientID</td>
                                <td>@patient.FullName</td>
                                <td>@patient.DOB.ToString("yyyy-MM-dd")</td>
                                <td>@patient.Gender</td>
                                <td>@patient.ContactNumber</td>
                                <td class="medical-actions">
                                    <button class="medical-btn-view" @onclick="() => ShowMedicalHistory(patient)">
                                        <i class="bi bi-eye"></i> View History
                                    </button>
                                    <button class="medical-btn-edit" @onclick="() => EditPatient(patient)">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                </td>
                            </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @if (showEditModal)
    {
            <div class="medical-modal-overlay" @onclick="CloseEditModal">
                <div class="medical-modal-content medical-edit-patient-modal" @onclick:stopPropagation>
                    <div class="medical-modal-header">
                        <h5>Edit Patient - @selectedPatient.FullName</h5>
                        <button class="medical-btn-close" @onclick="CloseEditModal">×</button>
                    </div>
                    <div class="medical-modal-body">
                        <div class="medical-patient-edit-form">
                            <div class="medical-form-section">
                                <h6>Prescribe Medicine</h6>
                                <div class="medical-form-group">
                                    <label>Medication</label>
                                    <select @bind="selectedMedicationId">
                                        <option value="0">Select Medication</option>
                                    @foreach (var medication in Medications)
                                    {
                                                <option value="@medication.MedicationID">@medication.Name - @medication.Dosage</option>
                                    }
                                    </select>
                                </div>
                                <div class="medical-form-group">
                                    <label>Dosage</label>
                                    <input type="text" @bind="prescriptionDosage" placeholder="e.g., 2 tablets daily" />
                                </div>
                                <div class="medical-form-group">
                                    <label>Special Instructions</label>
                                    <textarea @bind="prescriptionInstructions" placeholder="Additional instructions"></textarea>
                                </div>
                                <button class="medical-btn-save" @onclick="SavePrescription">Add Prescription</button>
                            </div>

                            <div class="medical-form-section">
                                <h6>Update Patient Progress</h6>
                                <div class="medical-form-group">
                                    <label>Diagnosis</label>
                                    <textarea @bind="diagnosis" placeholder="Enter diagnosis"></textarea>
                                </div>
                                <div class="medical-form-group">
                                    <label>Treatment Plan</label>
                                    <textarea @bind="treatmentPlan" placeholder="Describe treatment plan"></textarea>
                                </div>
                                <div class="medical-form-group">
                                    <label>Next Follow-up Date</label>
                                    <input type="date" @bind="nextFollowUpDate" />
                                </div>
                                <button class="medical-btn-save" @onclick="UpdatePatientProgress">Save Progress</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    }

    @if (showMedicalHistoryModal)
    {
            <div class="medical-modal-overlay" @onclick="CloseMedicalHistoryModal">
                <div class="medical-modal-content medical-medical-history" @onclick:stopPropagation>
                    <div class="medical-modal-header">
                        <h5>Medical History - @selectedPatient.FullName</h5>
                        <button class="medical-btn-close" @onclick="CloseMedicalHistoryModal">×</button>
                    </div>
                    <div class="medical-modal-body">
                        <div class="medical-details">
                            <p><strong>Patient ID:</strong> @selectedPatient.PatientID</p>
                            <p><strong>Date of Birth:</strong> @selectedPatient.DOB.ToString("yyyy-MM-dd")</p>
                            <p><strong>Gender:</strong> @selectedPatient.Gender</p>
                            <p><strong>Contact:</strong> @selectedPatient.ContactNumber</p>

                            <h6>Medical Records:</h6>
                        @if (patientMedicalRecords.Count == 0)
                        {
                                    <p>No medical records found</p>
                        }
                        else
                        {
                                    <div class="medical-records-list">
                                @foreach (var record in patientMedicalRecords)
                                {
                                                <div class="medical-record">
                                                    <p><strong>Date:</strong> @record.CreatedAt.ToString("yyyy-MM-dd")</p>
                                                    <p><strong>Diagnosis:</strong> @record.Diagnosis</p>
                                                    <p><strong>Treatment:</strong> @record.TreatmentPlan</p>
                                                    <hr />
                                                </div>
                                }
                                    </div>
                        }

                            <h6>Prescriptions:</h6>
                        @if (patientPrescriptions.Count == 0)
                        {
                                    <p>No prescriptions found</p>
                        }
                        else
                        {
                                    <div class="prescriptions-list">
                                @foreach (var prescription in patientPrescriptions)
                                {
                                                <div class="prescription">
                                                    <p><strong>Medication:</strong> @prescription.Medication?.Name</p>
                                                    <p><strong>Dosage:</strong> @prescription.Dosage</p>
                                                    <p><strong>Instructions:</strong> @prescription.Instructions</p>
                                                    <p><strong>Prescribed On:</strong> @prescription.PrescribedAt.ToString("yyyy-MM-dd")</p>
                                                    <hr />
                                                </div>
                                }
                                    </div>
                        }
                        </div>
                    </div>
                </div>
            </div>
    }
</div>

@code {
    // API Endpoints
    private string patientsApiUrl = "/api/Patient";
    private string medicationsApiUrl = "/api/Medications";
    private string prescriptionsApiUrl = "/api/Prescription";
    private string medicalRecordsApiUrl = "/api/MedicalRecords";

    // Data
    private List<Patient> Patients = new();
    private List<Patient> FilteredPatients = new();
    private List<Medication> Medications = new();
    private List<MedicalRecord> patientMedicalRecords = new();
    private List<Prescription> patientPrescriptions = new();

    // UI State
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string patientSearchTerm = "";
    private bool showMedicalHistoryModal = false;
    private bool showEditModal = false;
    private Patient selectedPatient = new();

    // Prescription variables
    private int selectedMedicationId;
    private string prescriptionDosage = "";
    private string prescriptionInstructions = "";

    // Medical Record variables
    private string diagnosis = "";
    private string treatmentPlan = "";
    private DateTime nextFollowUpDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        await LoadPatients();
        await LoadMedications();
    }

    private async Task LoadPatients()
    {
        isLoading = true;
        try
        {
            var response = await Http.GetAsync(patientsApiUrl);
            if (response.IsSuccessStatusCode)
            {
                Patients = await response.Content.ReadFromJsonAsync<List<Patient>>() ?? new List<Patient>();
                FilteredPatients = Patients;
            }
            else
            {
                errorMessage = "Failed to load patients";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading patients: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMedications()
    {
        try
        {
            var response = await Http.GetAsync(medicationsApiUrl);
            if (response.IsSuccessStatusCode)
            {
                Medications = await response.Content.ReadFromJsonAsync<List<Medication>>() ?? new List<Medication>();
            }
            else
            {
                errorMessage = "Failed to load medications";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading medications: {ex.Message}";
        }
    }

    private async Task LoadPatientMedicalRecords(int patientId)
    {
        try
        {
            var response = await Http.GetAsync($"{medicalRecordsApiUrl}/patient/{patientId}");
            if (response.IsSuccessStatusCode)
            {
                patientMedicalRecords = await response.Content.ReadFromJsonAsync<List<MedicalRecord>>() ?? new List<MedicalRecord>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading medical records: {ex.Message}");
        }
    }

    private async Task LoadPatientPrescriptions(int patientId)
    {
        try
        {
            var response = await Http.GetAsync($"{prescriptionsApiUrl}/patient/{patientId}");
            if (response.IsSuccessStatusCode)
            {
                patientPrescriptions = await response.Content.ReadFromJsonAsync<List<Prescription>>() ?? new List<Prescription>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading prescriptions: {ex.Message}");
        }
    }

    private void FilterPatients()
    {
        FilteredPatients = Patients.Where(p =>
            string.IsNullOrEmpty(patientSearchTerm) ||
            p.PatientID.ToString().Contains(patientSearchTerm) ||
            p.FullName.Contains(patientSearchTerm, StringComparison.OrdinalIgnoreCase)
        ).ToList();
    }

    private async Task ShowMedicalHistory(Patient patient)
    {
        selectedPatient = patient;
        await LoadPatientMedicalRecords(patient.PatientID);
        await LoadPatientPrescriptions(patient.PatientID);
        showMedicalHistoryModal = true;
    }

    private void EditPatient(Patient patient)
    {
        selectedPatient = patient;
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        ResetEditFields();
    }

    private void CloseMedicalHistoryModal()
    {
        showMedicalHistoryModal = false;
    }

    private void ResetEditFields()
    {
        selectedMedicationId = 0;
        prescriptionDosage = "";
        prescriptionInstructions = "";
        diagnosis = "";
        treatmentPlan = "";
        nextFollowUpDate = DateTime.Now;
    }

    private async Task SavePrescription()
    {
        if (selectedMedicationId == 0 || string.IsNullOrWhiteSpace(prescriptionDosage))
        {
            errorMessage = "Please select a medication and enter dosage";
            return;
        }

        isLoading = true;
        try
        {
            var prescription = new PrescriptionRequest
                {
                    PatientID = selectedPatient.PatientID,
                    MedicationID = selectedMedicationId,
                    Dosage = prescriptionDosage,
                    Instructions = prescriptionInstructions,
                    PrescribedAt = DateTime.Now
                };

            var response = await Http.PostAsJsonAsync(prescriptionsApiUrl, prescription);

            if (response.IsSuccessStatusCode)
            {
                // Reset fields
                selectedMedicationId = 0;
                prescriptionDosage = "";
                prescriptionInstructions = "";
            }
            else
            {
                errorMessage = "Failed to save prescription";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving prescription: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdatePatientProgress()
    {
        if (string.IsNullOrWhiteSpace(diagnosis) || string.IsNullOrWhiteSpace(treatmentPlan))
        {
            errorMessage = "Diagnosis and treatment plan are required";
            return;
        }

        isLoading = true;
        try
        {
            var medicalRecord = new MedicalRecordRequest
                {
                    PatientID = selectedPatient.PatientID,
                    Diagnosis = diagnosis,
                    TreatmentPlan = treatmentPlan,
                    CreatedAt = DateTime.Now
                };

            var response = await Http.PostAsJsonAsync(medicalRecordsApiUrl, medicalRecord);

            if (response.IsSuccessStatusCode)
            {
                // Reset fields
                diagnosis = "";
                treatmentPlan = "";
                nextFollowUpDate = DateTime.Now;
            }
            else
            {
                errorMessage = "Failed to save medical record";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving medical record: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    // Request DTOs
    public class PrescriptionRequest
    {
        public int PatientID { get; set; }
        public int MedicationID { get; set; }
        public string Dosage { get; set; }
        public string Instructions { get; set; }
        public DateTime PrescribedAt { get; set; }
    }

    public class MedicalRecordRequest
    {
        public int PatientID { get; set; }
        public string Diagnosis { get; set; }
        public string TreatmentPlan { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    // Model classes
    public class Patient
    {
        public int PatientID { get; set; }
        public string FullName { get; set; }
        public DateTime DOB { get; set; }
        public string Gender { get; set; }
        public string ContactNumber { get; set; }
    }

    public class Medication
    {
        public int MedicationID { get; set; }
        public string Name { get; set; }
        public string Dosage { get; set; }
        public string Description { get; set; }
    }

    public class Prescription
    {
        public int PrescriptionID { get; set; }
        public int PatientID { get; set; }
        public int MedicationID { get; set; }
        public Medication Medication { get; set; }
        public string Dosage { get; set; }
        public string Instructions { get; set; }
        public DateTime PrescribedAt { get; set; }
    }

    public class MedicalRecord
    {
        public int RecordID { get; set; }
        public int PatientID { get; set; }
        public string Diagnosis { get; set; }
        public string TreatmentPlan { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}