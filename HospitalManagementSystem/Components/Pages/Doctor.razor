@page "/doctor"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<Doctor> Logger

<div class="medical-dashboard-container">
    @if (isLoading)
    {
        <div class="loading-overlay">
            <div class="spinner"></div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
            <button class="btn-close" @onclick="ClearError">×</button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">
            @successMessage
            <button class="btn-close" @onclick="ClearSuccessMessage">×</button>
        </div>
    }

    <header class="medical-dashboard-header">
        <h1>Doctor Dashboard</h1>
    </header>

    <div class="medical-patient-records-section">
        <div class="medical-header-controls">
            <input type="text" class="medical-search-bar" placeholder="Search patients by ID or Name"
                   @bind="patientSearchTerm" @bind:event="oninput" @onkeyup="FilterPatients" />
        </div>

        <div class="medical-table-container">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Patient ID</th>
                        <th>Full Name</th>
                        <th>Date of Birth</th>
                        <th>Gender</th>
                        <th>Contact Number</th>
                        <th class="medical-actions">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var patient in FilteredPatients)
                    {
                        <tr>
                            <td>@patient.PatientID</td>
                            <td>@patient.FullName</td>
                            <td>@patient.DOB.ToString("yyyy-MM-dd")</td>
                            <td>@patient.Gender</td>
                            <td>@patient.ContactNumber</td>
                            <td class="medical-actions">
                                <button class="btn btn-primary btn-sm" @onclick="() => ShowMedicalHistory(patient)">
                                    <i class="bi bi-eye"></i> View History
                                </button>
                                <button class="btn btn-info btn-sm" @onclick="() => EditPatient(patient)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Edit Patient Modal -->
    @if (showEditModal)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5)" @onclick="CloseEditModal">
            <div class="modal-dialog modal-lg" @onclick:stopPropagation>
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Patient Treatment - @selectedPatient.FullName</h5>
                        <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card mb-3">
                                    <div class="card-header">
                                        <h6>Prescribe Medication</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label class="form-label">Medication</label>
                                            <select class="form-select" @bind="selectedMedicationId">
                                                <option value="0">Select Medication</option>
                                                @foreach (var medication in Medications)
                                                {
                                                    <option value="@medication.MedicationID">@medication.Name (@medication.Dosage)</option>
                                                }
                                            </select>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Dosage Instructions</label>
                                            <input type="text" class="form-control" @bind="prescriptionDosage"
                                                   placeholder="e.g., 2 tablets daily" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Special Instructions</label>
                                            <textarea class="form-control" @bind="prescriptionInstructions"
                                                      placeholder="Additional instructions"></textarea>
                                        </div>
                                        <button class="btn btn-primary" @onclick="SavePrescription">
                                            <i class="bi bi-save"></i> Add Prescription
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header">
                                        <h6>Medical Record</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label class="form-label">Diagnosis</label>
                                            <textarea class="form-control" @bind="diagnosis"
                                                      placeholder="Enter diagnosis"></textarea>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Treatment Plan</label>
                                            <textarea class="form-control" @bind="treatmentPlan"
                                                      placeholder="Describe treatment plan"></textarea>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Next Follow-up Date</label>
                                            <input type="date" class="form-control" @bind="nextFollowUpDate" />
                                        </div>
                                        <button class="btn btn-success" @onclick="UpdatePatientProgress">
                                            <i class="bi bi-save"></i> Save Progress
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Medical History Modal -->
    @if (showMedicalHistoryModal)
    {
        <div class="medical-history-fullscreen" @onclick="CloseMedicalHistoryModal">
            <div class="modal-content" @onclick:stopPropagation>
                <div class="modal-header">
                    <h5 class="modal-title">Medical History - @selectedPatient.FullName</h5>
                    <button type="button" class="btn-close" @onclick="CloseMedicalHistoryModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h6>Patient Information</h6>
                            <p><strong>ID:</strong> @selectedPatient.PatientID</p>
                            <p><strong>Age:</strong> @CalculateAge(selectedPatient.DOB)</p>
                            <p><strong>Gender:</strong> @selectedPatient.Gender</p>
                            <p><strong>Contact:</strong> @selectedPatient.ContactNumber</p>
                        </div>
                        <div class="col-md-6">
                            <h6>Medical Summary</h6>
                            <p><strong>Last Visit:</strong> @(patientMedicalRecords.LastOrDefault()?.CreatedAt.ToString("yyyy-MM-dd") ?? "N/A")</p>
                            <p><strong>Last Diagnosis:</strong> @(patientMedicalRecords.LastOrDefault()?.Diagnosis ?? "N/A")</p>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-header">
                                    <h6>Medical Records</h6>
                                </div>
                                <div class="card-body" style="overflow-y: auto;">
                                    @if (patientMedicalRecords.Count == 0)
                                    {
                                        <p class="text-muted">No medical records found</p>
                                    }
                                    else
                                    {
                                        @foreach (var record in patientMedicalRecords.OrderByDescending(r => r.CreatedAt))
                                        {
                                            <div class="mb-3 p-2 border-bottom">
                                                <h6>@record.CreatedAt.ToString("yyyy-MM-dd")</h6>
                                                <p><strong>Diagnosis:</strong> @record.Diagnosis</p>
                                                <p><strong>Treatment:</strong> @record.TreatmentPlan</p>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-header">
                                    <h6>Prescriptions</h6>
                                </div>
                                <div class="card-body" style="overflow-y: auto;">
                                    @if (patientPrescriptions.Count == 0)
                                    {
                                        <p class="text-muted">No prescriptions found</p>
                                    }
                                    else
                                    {
                                        @foreach (var prescription in patientPrescriptions.OrderByDescending(p => p.PrescribedAt))
                                        {
                                            <div class="mb-3 p-2 border-bottom">
                                                <h6>@prescription.PrescribedAt.ToString("yyyy-MM-dd")</h6>
                                                <p><strong>Medication:</strong> @prescription.Medication?.Name</p>
                                                <p><strong>Dosage:</strong> @prescription.Dosage</p>
                                                <p><strong>Instructions:</strong> @prescription.Instructions</p>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // API Endpoints
    private string patientsApiUrl = "https://localhost:7070/api/Patient";
    private string medicationsApiUrl = "https://localhost:7070/api/Medications";
    private string prescriptionsApiUrl = "https://localhost:7070/api/Prescription";
    private string medicalRecordsApiUrl = "https://localhost:7070/api/MedicalRecords";

    // Data
    private List<Patient> Patients = new();
    private List<Patient> FilteredPatients = new();
    private List<Medication> Medications = new();
    private List<MedicalRecord> patientMedicalRecords = new();
    private List<Prescription> patientPrescriptions = new();

    // UI State
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string patientSearchTerm = "";
    private bool showMedicalHistoryModal = false;
    private bool showEditModal = false;
    private Patient selectedPatient = new();

    // Form Fields
    private int selectedMedicationId = 0;
    private string prescriptionDosage = "";
    private string prescriptionInstructions = "";
    private string diagnosis = "";
    private string treatmentPlan = "";
    private DateTime nextFollowUpDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        await LoadPatients();
        await LoadMedications();
    }

    private async Task LoadPatients()
    {
        isLoading = true;
        try
        {
            var response = await Http.GetFromJsonAsync<List<Patient>>(patientsApiUrl);
            if (response != null)
            {
                Patients = response;
                FilteredPatients = Patients;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading patients: {ex.Message}";
            Logger.LogError(ex, "Error loading patients");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMedications()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<Medication>>(medicationsApiUrl);
            if (response != null)
            {
                Medications = response;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading medications: {ex.Message}";
            Logger.LogError(ex, "Error loading medications");
        }
    }
    private async Task LoadPatientMedicalRecords(int patientId)
    {
        try
        {
            var response = await Http.GetAsync($"{medicalRecordsApiUrl}/patient/{patientId}");

            if (response.IsSuccessStatusCode)
            {
                patientMedicalRecords = await response.Content.ReadFromJsonAsync<List<MedicalRecord>>()
                    ?? new List<MedicalRecord>();
            }
            else
            {
                Logger.LogError($"Failed to load medical records. Status: {response.StatusCode}");
                patientMedicalRecords = new List<MedicalRecord>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading medical records for patient {patientId}");
            patientMedicalRecords = new List<MedicalRecord>();
        }
    }

    private async Task LoadPatientPrescriptions(int patientId)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<Prescription>>($"{prescriptionsApiUrl}/patient/{patientId}");
            patientPrescriptions = response ?? new List<Prescription>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading prescriptions for patient {patientId}");
            patientPrescriptions = new List<Prescription>();
        }
    }

    private void FilterPatients()
    {
        FilteredPatients = Patients.Where(p =>
            string.IsNullOrEmpty(patientSearchTerm) ||
            p.PatientID.ToString().Contains(patientSearchTerm) ||
            p.FullName.Contains(patientSearchTerm, StringComparison.OrdinalIgnoreCase)
        ).ToList();
    }

    private int CalculateAge(DateTime dob)
    {
        var today = DateTime.Today;
        var age = today.Year - dob.Year;
        if (dob.Date > today.AddYears(-age)) age--;
        return age;
    }

    private async Task ShowMedicalHistory(Patient patient)
    {
        selectedPatient = patient;
        isLoading = true;
        StateHasChanged(); // Force UI update to show loading state

        try
        {
            // Load both in parallel
            await Task.WhenAll(
                LoadPatientMedicalRecords(patient.PatientID),
                LoadPatientPrescriptions(patient.PatientID)
            );
            showMedicalHistoryModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading patient history: {ex.Message}";
            Logger.LogError(ex, "Error loading patient history");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditPatient(Patient patient)
    {
        selectedPatient = patient;
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        ResetEditFields();
    }

    private void CloseMedicalHistoryModal()
    {
        showMedicalHistoryModal = false;
    }

    private void ResetEditFields()
    {
        selectedMedicationId = 0;
        prescriptionDosage = "";
        prescriptionInstructions = "";
        diagnosis = "";
        treatmentPlan = "";
        nextFollowUpDate = DateTime.Now;
    }

    private async Task SavePrescription()
    {
        if (selectedMedicationId == 0)
        {
            errorMessage = "Please select a medication";
            return;
        }

        if (string.IsNullOrWhiteSpace(prescriptionDosage))
        {
            errorMessage = "Please enter dosage instructions";
            return;
        }

        isLoading = true;
        try
        {
            var prescription = new PrescriptionRequest
                {
                    PatientID = selectedPatient.PatientID,
                    MedicationID = selectedMedicationId,
                    Dosage = prescriptionDosage,
                    Instructions = prescriptionInstructions,
                    PrescribedAt = DateTime.Now
                };

            var response = await Http.PostAsJsonAsync(prescriptionsApiUrl, prescription);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Prescription added successfully";
                ResetEditFields();
                // Refresh the prescriptions list
                await LoadPatientPrescriptions(selectedPatient.PatientID);
                // Keep the modal open for more entries
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to save prescription: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving prescription: {ex.Message}";
            Logger.LogError(ex, "Error saving prescription");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdatePatientProgress()
    {
        if (string.IsNullOrWhiteSpace(diagnosis))
        {
            errorMessage = "Diagnosis is required";
            return;
        }

        if (string.IsNullOrWhiteSpace(treatmentPlan))
        {
            errorMessage = "Treatment plan is required";
            return;
        }

        isLoading = true;
        try
        {
            var medicalRecord = new MedicalRecordRequest
                {
                    PatientID = selectedPatient.PatientID,
                    Diagnosis = diagnosis,
                    TreatmentPlan = treatmentPlan,
                    CreatedAt = DateTime.Now
                };

            var response = await Http.PostAsJsonAsync(medicalRecordsApiUrl, medicalRecord);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Medical record updated successfully";
                ResetEditFields();
                // Refresh the medical records list
                await LoadPatientMedicalRecords(selectedPatient.PatientID);
                // Keep the modal open for more entries
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to save medical record: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving medical record: {ex.Message}";
            Logger.LogError(ex, "Error saving medical record");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ClearError()
    {
        errorMessage = string.Empty;
    }

    private void ClearSuccessMessage()
    {
        successMessage = string.Empty;
    }

    // Request DTOs
    public class PrescriptionRequest
    {
        public int PatientID { get; set; }
        public int MedicationID { get; set; }
        public string Dosage { get; set; }
        public string Instructions { get; set; }
        public DateTime PrescribedAt { get; set; }
    }

    public class MedicalRecordRequest
    {
        public int PatientID { get; set; }
        public string Diagnosis { get; set; }
        public string TreatmentPlan { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    // Model classes matching backend
    public class Patient
    {
        public int PatientID { get; set; }
        public string FullName { get; set; }
        public DateTime DOB { get; set; }
        public string Gender { get; set; }
        public string ContactNumber { get; set; }
        public string Address { get; set; }
        public string MedicalHistory { get; set; }
    }

    public class Medication
    {
        public int MedicationID { get; set; }
        public string Name { get; set; }
        public string Dosage { get; set; }
        public string Description { get; set; }
    }

    public class Prescription
    {
        public int PrescriptionID { get; set; }
        public int? PatientID { get; set; }
        public Patient Patient { get; set; }
        public int MedicationID { get; set; }
        public Medication Medication { get; set; }
        public string Dosage { get; set; }
        public string Instructions { get; set; }
        public DateTime PrescribedAt { get; set; }
    }

    public class MedicalRecord
    {
        public int RecordID { get; set; }
        public int? PatientID { get; set; }
        public Patient Patient { get; set; }
        public string Diagnosis { get; set; }
        public string TreatmentPlan { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}