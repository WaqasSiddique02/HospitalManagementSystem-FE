@page "/medicine"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@inject NavigationManager NavigationManager

<div class="medicine-container">
    <button @onclick="Logout"
            style="position: absolute; top: 20px; right: 20px;
               background-color: transparent; border: 1px solid #dc3545;
               color: #dc3545; padding: 6px 12px; border-radius: 4px;
               cursor: pointer; transition: all 0.3s ease;"
            onmouseover="this.style.backgroundColor='#dc3545'; this.style.color='white'"
            onmouseout="this.style.backgroundColor='transparent'; this.style.color='#dc3545'">
        <i class="bi bi-box-arrow-right" style="margin-right: 5px;"></i> Logout
    </button>

    <!-- Add Back Button Here -->
    <button @onclick="GoBack"
            style="position: absolute; top: 20px; left: 20px;
               background-color: transparent; border: 1px solid #581845;
               color: #581845; padding: 6px 12px; border-radius: 4px;
               cursor: pointer; transition: all 0.3s ease;"
            onmouseover="this.style.backgroundColor='#581845'; this.style.color='white'"
            onmouseout="this.style.backgroundColor='transparent'; this.style.color='#581845'">
        <i class="bi bi-arrow-left" style="margin-right: 5px;"></i> Back
    </button>
    @if (isLoading)
    {
            <div class="loading-overlay">
                <div class="spinner"></div>
            </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
            <div class="alert alert-danger">@errorMessage</div>
    }

    <!-- Header -->
    <div class="medicine-header">
        <h1>Medication Management</h1>
        <div class="header-controls">
            <input type="text" class="search-bar" placeholder="Search by name..." 
                   @bind="searchTerm" @bind:event="oninput" />
            <select class="dosage-filter" @bind="selectedDosage">
                <option value="">All Dosages</option>
                @foreach (var dosage in dosageOptions)
                {
                        <option value="@dosage">@dosage</option>
                }
            </select>
            <button class="btn-add" @onclick="OpenAddModal">Add Medication</button>
        </div>
    </div>

    <!-- Table (Main Content) -->
    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Dosage</th>
                    <th>Description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var med in FilteredMedications)
                {
                        <tr>
                            <td>@med.Name</td>
                            <td>@med.Dosage</td>
                            <td>@(med.Description ?? "-")</td>
                            <td class="actions">
                                <button class="btn-edit" @onclick="() => OpenEditModal(med)" title="Edit">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn-delete" @onclick="() => ShowDeleteConfirmation(med)" title="Delete">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Add/Edit Modal -->
    @if (showModal)
    {
            <div class="modal-overlay" @onclick="CloseModal">
                <div class="modal-content" @onclick:stopPropagation>
                    <div class="modal-header">
                        <h2>@(isEditMode ? "Edit Medication" : "Add Medication")</h2>
                        <button class="btn-close" @onclick="CloseModal">×</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Name *</label>
                            <input type="text" @bind="currentMedication.Name" placeholder="Enter medication name" />
                        @if (nameValidationError)
                        {
                                    <span class="validation-error">Name is required</span>
                        }
                        </div>
                        <div class="form-group">
                            <label>Dosage *</label>
                            <input type="text" @bind="currentMedication.Dosage" placeholder="Enter dosage (e.g., 10mg)" />
                        @if (dosageValidationError)
                        {
                                    <span class="validation-error">Dosage is required</span>
                        }
                        </div>
                        <div class="form-group">
                            <label>Description</label>
                            <textarea @bind="currentMedication.Description" placeholder="Enter description" rows="4"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn-cancel" @onclick="CloseModal">Cancel</button>
                        <button class="btn-save" @onclick="SaveMedication">Save</button>
                    </div>
                </div>
            </div>
    }

    <!-- Delete Confirmation Modal -->
    @if (showDeleteModal)
    {
            <div class="modal-overlay" @onclick="CloseDeleteModal">
                <div class="modal-content" @onclick:stopPropagation>
                    <div class="modal-header">
                        <h2>Confirm Delete</h2>
                        <button class="btn-close" @onclick="CloseDeleteModal">×</button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete <strong>@medicationToDelete.Name</strong>?</p>
                        <p class="text-danger">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn-cancel" @onclick="CloseDeleteModal">Cancel</button>
                        <button class="btn-delete" @onclick="ConfirmDelete">Delete</button>
                    </div>
                </div>
            </div>
    }
</div>

@code {
    private void Logout()
    {
        NavigationManager.NavigateTo("/login");
    }
    private void GoBack()
    {
        Navigation.NavigateTo("/adminpanel");
    }
    // API Configuration
    private string apiUrl = "/api/Medications";

    // Data
    private List<Medication> medications = new();
    private List<string> dosageOptions = new();

    // UI State
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string searchTerm = "";
    private string selectedDosage = "";
    private bool showModal = false;
    private bool showDeleteModal = false;
    private bool isEditMode = false;
    private bool nameValidationError = false;
    private bool dosageValidationError = false;

    // Working Objects
    private Medication currentMedication = new();
    private Medication medicationToDelete = new();

    private List<Medication> FilteredMedications => medications
        .Where(m => string.IsNullOrEmpty(searchTerm) || m.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .Where(m => string.IsNullOrEmpty(selectedDosage) || m.Dosage == selectedDosage)
        .OrderBy(m => m.Name)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadMedications();
    }

    private async Task LoadMedications()
    {
        isLoading = true;
        errorMessage = string.Empty;
        try
        {
            var response = await Http.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                medications = await response.Content.ReadFromJsonAsync<List<Medication>>() ?? new List<Medication>();
                dosageOptions = medications.Select(m => m.Dosage).Distinct().OrderBy(d => d).ToList();
            }
            else
            {
                errorMessage = "Failed to load medications. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading medications: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OpenAddModal()
    {
        currentMedication = new Medication();
        isEditMode = false;
        showModal = true;
        nameValidationError = false;
        dosageValidationError = false;
    }

    private void OpenEditModal(Medication med)
    {
        currentMedication = new Medication
            {
                MedicationID = med.MedicationID,
                Name = med.Name,
                Dosage = med.Dosage,
                Description = med.Description
            };
        isEditMode = true;
        showModal = true;
        nameValidationError = false;
        dosageValidationError = false;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task SaveMedication()
    {
        // Validate inputs
        nameValidationError = string.IsNullOrWhiteSpace(currentMedication.Name);
        dosageValidationError = string.IsNullOrWhiteSpace(currentMedication.Dosage);

        if (nameValidationError || dosageValidationError)
        {
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            HttpResponseMessage response;

            if (isEditMode)
            {
                // Update existing medication
                response = await Http.PutAsJsonAsync($"{apiUrl}/{currentMedication.MedicationID}", currentMedication);
            }
            else
            {
                // Create new medication
                response = await Http.PostAsJsonAsync(apiUrl, currentMedication);
            }

            if (response.IsSuccessStatusCode)
            {
                await LoadMedications(); // Refresh the list
                CloseModal();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrWhiteSpace(errorMessage))
                {
                    errorMessage = "Operation failed. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving medication: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowDeleteConfirmation(Medication med)
    {
        medicationToDelete = med;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task ConfirmDelete()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var response = await Http.DeleteAsync($"{apiUrl}/{medicationToDelete.MedicationID}");

            if (response.IsSuccessStatusCode)
            {
                await LoadMedications(); // Refresh the list
            }
            else
            {
                errorMessage = "Failed to delete medication. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting medication: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            CloseDeleteModal();
        }
    }

    public class Medication
    {
        public int MedicationID { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Dosage { get; set; } = string.Empty;
        public string? Description { get; set; }
    }
}